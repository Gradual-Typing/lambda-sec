This directory contains a proof about type safety, that is, well-typed GLIO programs do /not/ get stuck.

+ [[./StaticsGLIO.agda][StaticsGLIO]] defines the statics (terms, typing judgments, etc. ) of the language.

+ [[./Consistency.agda][Consistency]] defines consistency relations (=~=) between information flow labels and types. It also proves that =S ∼ T ⇔ S ≲ T ∧ T ≲ S=.

+ [[./Interp.agda][Interp]] contains a definitional interpreter for the language.

  + 3 types of trapped errors ( ~timeout~ , ~NSUError~ , and ~castError~ ) .
  + Untrapped error : ~stuck~ .

+ [[./Store.agda][Store]] defines the store (heap) model, which loosely follows /chapter 13.4/ in /TAPL/.

+ [[./WellTypedness.agda][WellTypedness]] elaborates on what it means for a evaluation result of the definitional interpreter to be well-typed.

+ [[./InterpSafe.agda][InterpSafe]] deals with most of the heavy-lifting reasoning about the definitional interpreter.

+ The major theorem is at [[./TypeSafety.agda][TypeSafety]] .
