module CastStateIdem where

open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Nat.Properties renaming (_‚âü_ to _‚âü‚Çô_)
open import Data.List using (List; []; _‚à∑_; length)
open import Data.Product using (_√ó_; ‚àÉ; ‚àÉ-syntax; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Relation.Nullary using (Dec; yes; no; ¬¨_)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; subst; subst‚ÇÇ; trans)

open import Lemmas
open import StaticsGLIO
open import Store
open import Interp
open import WellTypedness


-- Matches program state ‚ü® Œº , pc ‚ü© from a configuration.
infix 10 _‚ñπ_,_

data _‚ñπ_,_ : Result Conf ‚Üí Store ‚Üí ‚Ñí ‚Üí Set where

  ‚ñπerror : ‚àÄ {Œº pc err} ‚Üí error err ‚ñπ Œº , pc

  ‚ñπtimeout : ‚àÄ {Œº pc} ‚Üí timeout ‚ñπ Œº , pc

  ‚ñπresult : ‚àÄ {Œº Œº‚Ä≤ v pc pc‚Ä≤}
    ‚Üí Œº‚Ä≤ ‚â° Œº
    ‚Üí pc‚Ä≤ ‚â° pc
    ‚Üí result ‚ü® Œº , v , pc ‚ü© ‚ñπ Œº‚Ä≤ , pc‚Ä≤

castT‚Ä≤-state-idem : ‚àÄ {Œº pc T‚ÇÅ T‚ÇÇ v}
  ‚Üí (T‚ÇÅ‚â≤T‚ÇÇ : T‚ÇÅ ‚â≤ T‚ÇÇ)
  ‚Üí Œº ‚ä¢·µ• v ‚¶Ç T‚ÇÅ
  ‚Üí castT‚Ä≤ Œº pc T‚ÇÅ T‚ÇÇ T‚ÇÅ‚â≤T‚ÇÇ v ‚ñπ Œº , pc
castT‚Ä≤-state-idem ‚â≤-‚ä§ ‚ä¢·µ•tt = ‚ñπresult refl refl
castT‚Ä≤-state-idem ‚â≤-ùîπ ‚ä¢·µ•true = ‚ñπresult refl refl
castT‚Ä≤-state-idem ‚â≤-ùîπ ‚ä¢·µ•false = ‚ñπresult refl refl
castT‚Ä≤-state-idem ‚â≤-‚Ñí ‚ä¢·µ•label = ‚ñπresult refl refl
castT‚Ä≤-state-idem (‚â≤-‚áí _ _ _ _) (‚ä¢·µ•clos ‚ä¢Œ≥ ‚ä¢M) = ‚ñπresult refl refl
castT‚Ä≤-state-idem (‚â≤-‚áí _ _ _ _) (‚ä¢·µ•proxy ‚ä¢v) = ‚ñπresult refl refl
castT‚Ä≤-state-idem {v = V-ref ‚ü® n , ‚Ñì‚ÇÅ , ‚Ñì‚ÇÇ ‚ü©} (‚â≤-Ref {‚ÑìÃÇ‚ÇÅ} {‚ÑìÃÇ‚ÇÇ} _ _ _ _) (‚ä¢·µ•ref eq)
  with ‚ÑìÃÇ‚ÇÇ
... | ¬ø = ‚ñπresult refl refl
... | (lÃÇ ‚Ñì‚ÇÇ‚Ä≤) with ‚Ñì‚ÇÇ ‚âü ‚Ñì‚ÇÇ‚Ä≤
...   | yes _ = ‚ñπresult refl refl
...   | no  _ = ‚ñπerror
castT‚Ä≤-state-idem {v = V-ref ‚ü® n , ‚Ñì‚ÇÅ , ‚Ñì‚ÇÇ ‚ü©} (‚â≤-Ref {‚ÑìÃÇ‚ÇÅ} {‚ÑìÃÇ‚ÇÇ} _ _ _ _) (‚ä¢·µ•ref-dyn eq)
  with ‚ÑìÃÇ‚ÇÇ
... | ¬ø = ‚ñπresult refl refl
... | (lÃÇ ‚Ñì‚ÇÇ‚Ä≤) with ‚Ñì‚ÇÇ ‚âü ‚Ñì‚ÇÇ‚Ä≤
...   | yes _ = ‚ñπresult refl refl
...   | no  _ = ‚ñπerror
castT‚Ä≤-state-idem {Œº} {pc} {v = V-lab ‚Ñì v} (‚â≤-Lab {‚ÑìÃÇ‚ÇÅ} {‚ÑìÃÇ‚ÇÇ} {T‚ÇÅ} {T‚ÇÇ} _ T‚ÇÅ‚â≤T‚ÇÇ) (‚ä¢·µ•lab ‚Ñì‚âº‚Ñì‚Ä≤ ‚ä¢v)
  with (lÃÇ ‚Ñì) ‚âæ? ‚ÑìÃÇ‚ÇÇ
... | no  _ = ‚ñπerror
... | yes _ with castT‚Ä≤ Œº pc T‚ÇÅ T‚ÇÇ T‚ÇÅ‚â≤T‚ÇÇ v | castT‚Ä≤-state-idem {Œº} {pc} {T‚ÇÅ} {T‚ÇÇ} {v} T‚ÇÅ‚â≤T‚ÇÇ ‚ä¢v
...   | result ‚ü® Œº‚Ä≤ , v‚Ä≤ , pc‚Ä≤ ‚ü© | ‚ñπresult Œº‚â°Œº‚Ä≤ pc‚â°pc‚Ä≤ = ‚ñπresult Œº‚â°Œº‚Ä≤ pc‚â°pc‚Ä≤
...   | timeout | ‚ñπtimeout = ‚ñπtimeout
...   | error _ | ‚ñπerror = ‚ñπerror
castT‚Ä≤-state-idem {Œº} {pc} {v = V-lab ‚Ñì v} (‚â≤-Lab {‚ÑìÃÇ‚ÇÅ} {‚ÑìÃÇ‚ÇÇ} {T‚ÇÅ} {T‚ÇÇ} _ T‚ÇÅ‚â≤T‚ÇÇ) (‚ä¢·µ•lab-dyn ‚ä¢v)
  with (lÃÇ ‚Ñì) ‚âæ? ‚ÑìÃÇ‚ÇÇ
... | no  _ = ‚ñπerror
... | yes _ with castT‚Ä≤ Œº pc T‚ÇÅ T‚ÇÇ T‚ÇÅ‚â≤T‚ÇÇ v | castT‚Ä≤-state-idem {Œº} {pc} {T‚ÇÅ} {T‚ÇÇ} {v} T‚ÇÅ‚â≤T‚ÇÇ ‚ä¢v
...   | result ‚ü® Œº‚Ä≤ , v‚Ä≤ , pc‚Ä≤ ‚ü© | ‚ñπresult Œº‚â°Œº‚Ä≤ pc‚â°pc‚Ä≤ = ‚ñπresult Œº‚â°Œº‚Ä≤ pc‚â°pc‚Ä≤
...   | timeout | ‚ñπtimeout = ‚ñπtimeout
...   | error _ | ‚ñπerror = ‚ñπerror


castT-state-idem : ‚àÄ {Œº pc T‚ÇÅ T‚ÇÇ v}
  ‚Üí Œº ‚ä¢·µ• v ‚¶Ç T‚ÇÅ
  ‚Üí castT Œº pc T‚ÇÅ T‚ÇÇ v ‚ñπ Œº , pc
castT-state-idem {Œº} {pc} {T‚ÇÅ} {T‚ÇÇ} {v} ‚ä¢v with T‚ÇÅ ‚â≤? T‚ÇÇ
... | yes T‚ÇÅ‚â≤T‚ÇÇ = castT‚Ä≤-state-idem T‚ÇÅ‚â≤T‚ÇÇ ‚ä¢v
... | no  _     = ‚ñπerror


castL-state-idem : ‚àÄ {Œº pc ‚ÑìÃÇ‚ÇÅ ‚ÑìÃÇ‚ÇÇ}
  ‚Üí (‚ÑìÃÇ‚ÇÅ‚âæ‚ÑìÃÇ‚ÇÇ : ‚ÑìÃÇ‚ÇÅ ‚âæ ‚ÑìÃÇ‚ÇÇ)
  ‚Üí castL Œº pc ‚ÑìÃÇ‚ÇÅ ‚ÑìÃÇ‚ÇÇ ‚ÑìÃÇ‚ÇÅ‚âæ‚ÑìÃÇ‚ÇÇ ‚ñπ Œº , pc
castL-state-idem {Œº} {pc} {‚ÑìÃÇ‚ÇÅ} {‚ÑìÃÇ‚ÇÇ} ‚ÑìÃÇ‚ÇÅ‚âæ‚ÑìÃÇ‚ÇÇ with (lÃÇ pc) ‚âæ? ‚ÑìÃÇ‚ÇÇ
... | yes _ = ‚ñπresult refl refl
... | no  _ = ‚ñπerror
