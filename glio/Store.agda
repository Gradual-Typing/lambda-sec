module Store where

open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Nat.Properties renaming (_‚âü_ to _‚âü‚Çô_)
open import Data.List using (List; []; _‚à∑_)
open import Data.Product using (_√ó_; ‚àÉ; ‚àÉ-syntax; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Relation.Nullary using (Dec; yes; no; ¬¨_)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; cong; cong‚ÇÇ)

open import StaticsGLIO
open import Lemmas


-- Store (heap) location index
Location = ‚Ñï √ó ‚Ñí √ó ‚Ñí

_‚âü‚Çó_ : (loc loc‚Ä≤ : Location) ‚Üí Dec (loc ‚â° loc‚Ä≤)
‚ü® n , ‚Ñì‚ÇÅ , ‚Ñì‚ÇÇ ‚ü© ‚âü‚Çó ‚ü® n‚Ä≤ , ‚Ñì‚ÇÅ‚Ä≤ , ‚Ñì‚ÇÇ‚Ä≤ ‚ü©
  with n ‚âü‚Çô n‚Ä≤ | ‚Ñì‚ÇÅ ‚âü ‚Ñì‚ÇÅ‚Ä≤ | ‚Ñì‚ÇÇ ‚âü ‚Ñì‚ÇÇ‚Ä≤
... | yes n‚â°n‚Ä≤ | yes ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ | yes ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ =
  let p‚â° = cong‚ÇÇ (Œª ‚ñ°‚ÇÅ ‚ñ°‚ÇÇ ‚Üí ‚ü® ‚ñ°‚ÇÅ , ‚ñ°‚ÇÇ ‚ü©) ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ in
    yes (cong‚ÇÇ (Œª ‚ñ°‚ÇÅ ‚ñ°‚ÇÇ ‚Üí ‚ü® ‚ñ°‚ÇÅ , ‚ñ°‚ÇÇ ‚ü©) n‚â°n‚Ä≤ p‚â°)
... | yes n‚â°n‚Ä≤ | yes ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ | no ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ = proj‚ÇÇ (√ó-‚â°-inv (proj‚ÇÇ (√ó-‚â°-inv p‚â°))) in ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤
... | yes n‚â°n‚Ä≤ | no ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ | yes ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ = proj‚ÇÅ (√ó-‚â°-inv (proj‚ÇÇ (√ó-‚â°-inv p‚â°))) in ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤
... | no n‚â¢n‚Ä≤ | yes ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ | yes ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let n‚â°n‚Ä≤ = proj‚ÇÅ (√ó-‚â°-inv p‚â°) in n‚â¢n‚Ä≤ n‚â°n‚Ä≤
... | no n‚â¢n‚Ä≤ | no ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ | yes ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let n‚â°n‚Ä≤ = proj‚ÇÅ (√ó-‚â°-inv p‚â°) in n‚â¢n‚Ä≤ n‚â°n‚Ä≤
... | no n‚â¢n‚Ä≤ | yes ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ | no ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let n‚â°n‚Ä≤ = proj‚ÇÅ (√ó-‚â°-inv p‚â°) in n‚â¢n‚Ä≤ n‚â°n‚Ä≤
... | yes n‚â°n‚Ä≤ | no ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ | no ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ = proj‚ÇÇ (√ó-‚â°-inv (proj‚ÇÇ (√ó-‚â°-inv p‚â°))) in ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤
... | no n‚â¢n‚Ä≤ | no ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ | no ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ =
  no Œª p‚â° ‚Üí let n‚â°n‚Ä≤ = proj‚ÇÅ (√ó-‚â°-inv p‚â°) in n‚â¢n‚Ä≤ n‚â°n‚Ä≤

-- n‚â¢n‚Ä≤‚Üíloc‚â¢loc‚Ä≤ : ‚àÄ {n n‚Ä≤ : ‚Ñï} {‚Ñì‚ÇÅ ‚Ñì‚ÇÅ‚Ä≤ ‚Ñì‚ÇÇ ‚Ñì‚ÇÇ‚Ä≤ : ‚Ñí}
--   ‚Üí n ‚â¢ n‚Ä≤
--   ‚Üí ‚ü® n , ‚Ñì‚ÇÅ , ‚Ñì‚ÇÇ ‚ü© ‚â¢ ‚ü® n‚Ä≤ , ‚Ñì‚ÇÅ‚Ä≤ , ‚Ñì‚ÇÇ‚Ä≤ ‚ü©
-- n‚â¢n‚Ä≤‚Üíloc‚â¢loc‚Ä≤ n‚â¢n‚Ä≤ = Œª p‚â° ‚Üí let n‚â°n‚Ä≤ = proj‚ÇÅ (√ó-‚â°-inv p‚â°) in n‚â¢n‚Ä≤ n‚â°n‚Ä≤

‚âü‚Çó-‚â°-normal : ‚àÄ {loc} ‚Üí ‚àÉ[ eq ] (loc ‚âü‚Çó loc ‚â° yes eq)
‚âü‚Çó-‚â°-normal {‚ü® n , ‚Ñì‚ÇÅ , ‚Ñì‚ÇÇ ‚ü©}
  with n ‚âü‚Çô n | ‚Ñì‚ÇÅ ‚âü ‚Ñì‚ÇÅ | ‚Ñì‚ÇÇ ‚âü ‚Ñì‚ÇÇ
... | yes eq‚ÇÅ | yes eq‚ÇÇ | yes eq‚ÇÉ =
  ‚ü® cong‚ÇÇ (Œª ‚ñ°‚ÇÅ ‚ñ°‚ÇÇ ‚Üí ‚ü® ‚ñ°‚ÇÅ , ‚ñ°‚ÇÇ ‚ü©) eq‚ÇÅ (cong‚ÇÇ (Œª ‚ñ°‚ÇÅ ‚ñ°‚ÇÇ ‚Üí ‚ü® ‚ñ°‚ÇÅ , ‚ñ°‚ÇÇ ‚ü©) eq‚ÇÇ eq‚ÇÉ) , refl ‚ü©
... | yes _   | yes _   | no neq  = ‚ä•-elim (neq refl)
... | yes _   | no neq  | yes _   = ‚ä•-elim (neq refl)
... | no neq  | yes _   | yes _   = ‚ä•-elim (neq refl)
... | yes _   | no neq  | no _    = ‚ä•-elim (neq refl)
... | no neq  | yes _   | no _    = ‚ä•-elim (neq refl)
... | no neq  | no _    | yes _   = ‚ä•-elim (neq refl)
... | no neq  | no _    | no _    = ‚ä•-elim (neq refl)

‚âü‚Çó-‚â¢-normal : ‚àÄ {loc loc‚Ä≤} ‚Üí (neq : loc ‚â¢ loc‚Ä≤) ‚Üí ‚àÉ[ neq‚Ä≤ ] (loc ‚âü‚Çó loc‚Ä≤ ‚â° no neq‚Ä≤)
‚âü‚Çó-‚â¢-normal {‚ü® n , ‚Ñì‚ÇÅ , ‚Ñì‚ÇÇ ‚ü©} {‚ü® n‚Ä≤ , ‚Ñì‚ÇÅ‚Ä≤ , ‚Ñì‚ÇÇ‚Ä≤ ‚ü©} neq
  with n ‚âü‚Çô n‚Ä≤ | ‚Ñì‚ÇÅ ‚âü ‚Ñì‚ÇÅ‚Ä≤ | ‚Ñì‚ÇÇ ‚âü ‚Ñì‚ÇÇ‚Ä≤
... | yes n‚â°n‚Ä≤ | yes ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ | yes ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤ =
  ‚ä•-elim (neq (cong‚ÇÇ (Œª ‚ñ°‚ÇÅ ‚ñ°‚ÇÇ ‚Üí ‚ü® ‚ñ°‚ÇÅ , ‚ñ°‚ÇÇ ‚ü©) n‚â°n‚Ä≤ (cong‚ÇÇ (Œª ‚ñ°‚ÇÅ ‚ñ°‚ÇÇ ‚Üí ‚ü® ‚ñ°‚ÇÅ , ‚ñ°‚ÇÇ ‚ü©) ‚Ñì‚ÇÅ‚â°‚Ñì‚ÇÅ‚Ä≤ ‚Ñì‚ÇÇ‚â°‚Ñì‚ÇÇ‚Ä≤)))
... | yes _ | yes _ | no ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ =
  ‚ü® (Œª p‚â° ‚Üí ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ (proj‚ÇÇ (√ó-‚â°-inv (proj‚ÇÇ (√ó-‚â°-inv p‚â°))))) , refl ‚ü©
... | yes _ | no ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ | yes _ =
  ‚ü® (Œª p‚â° ‚Üí ‚Ñì‚ÇÅ‚â¢‚Ñì‚ÇÅ‚Ä≤ (proj‚ÇÅ (√ó-‚â°-inv (proj‚ÇÇ (√ó-‚â°-inv p‚â°))))) , refl ‚ü©
... | no n‚â¢n‚Ä≤ | yes _ | yes _ =
  ‚ü® (Œª p‚â° ‚Üí n‚â¢n‚Ä≤ (proj‚ÇÅ (√ó-‚â°-inv p‚â°))) , refl ‚ü©
... | yes _ | no _ | no ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ =
  ‚ü® (Œª p‚â° ‚Üí ‚Ñì‚ÇÇ‚â¢‚Ñì‚ÇÇ‚Ä≤ (proj‚ÇÇ (√ó-‚â°-inv (proj‚ÇÇ (√ó-‚â°-inv p‚â°))))) , refl ‚ü©
... | no n‚â¢n‚Ä≤ | yes _ | no _ =
  ‚ü® (Œª p‚â° ‚Üí n‚â¢n‚Ä≤ (proj‚ÇÅ (√ó-‚â°-inv p‚â°))) , refl ‚ü©
... | no n‚â¢n‚Ä≤ | no _ | yes _ =
  ‚ü® (Œª p‚â° ‚Üí n‚â¢n‚Ä≤ (proj‚ÇÅ (√ó-‚â°-inv p‚â°))) , refl ‚ü©
... | no n‚â¢n‚Ä≤  | no _ | no _ =
  ‚ü® (Œª p‚â° ‚Üí n‚â¢n‚Ä≤ (proj‚ÇÅ (√ó-‚â°-inv p‚â°))) , refl ‚ü©

mutual
  -- A closure is a term with an env
  data Clos : Set where
    <_,_,_> : ‚àÄ {Œî T S ‚ÑìÃÇ‚ÇÅ ‚ÑìÃÇ‚ÇÇ} ‚Üí (M : Term) ‚Üí Env ‚Üí T ‚à∑ Œî [ ‚ÑìÃÇ‚ÇÅ , ‚ÑìÃÇ‚ÇÇ ]‚ä¢ M ‚¶Ç S ‚Üí Clos

  data Value : Set where
    V-tt : Value

    V-true : Value
    V-false : Value

    V-label : ‚Ñí ‚Üí Value

    V-clos : Clos ‚Üí Value

    {- V-proxy casts from (S ‚áí T) to (S‚Ä≤ ‚áí T‚Ä≤) , (‚ÑìÃÇ‚ÇÅ ‚ÑìÃÇ‚ÇÇ) to (‚ÑìÃÇ‚ÇÅ‚Ä≤ ‚ÑìÃÇ‚ÇÇ‚Ä≤) -}
    V-proxy : (S T S‚Ä≤ T‚Ä≤  : ùïã) ‚Üí (‚ÑìÃÇ‚ÇÅ ‚ÑìÃÇ‚ÇÇ ‚ÑìÃÇ‚ÇÅ‚Ä≤ ‚ÑìÃÇ‚ÇÇ‚Ä≤ : ‚ÑíÃÇ)
            ‚Üí S‚Ä≤ ‚â≤ S ‚Üí T ‚â≤ T‚Ä≤
            ‚Üí ‚ÑìÃÇ‚ÇÅ‚Ä≤ ‚âæ ‚ÑìÃÇ‚ÇÅ ‚Üí ‚ÑìÃÇ‚ÇÇ ‚âæ ‚ÑìÃÇ‚ÇÇ‚Ä≤
            ‚Üí Value
            ‚Üí Value

    V-ref : Location ‚Üí Value

    V-lab : ‚Ñí ‚Üí Value ‚Üí Value

  Env : Set
  Env = List Value


data Cell (X : Set) : Set where
  _‚Ü¶_ : Location ‚Üí X ‚Üí Cell X

Store = List (Cell (ùïã √ó Value))


lookup : ‚àÄ {X} ‚Üí (Œº : List (Cell X)) ‚Üí Location ‚Üí Maybe X
lookup [] _ = nothing
lookup ( loc ‚Ü¶ x ‚à∑ Œº‚Ä≤ ) loc‚Ä≤ with loc ‚âü‚Çó loc‚Ä≤
... | yes _ = just x
... | no  _ = lookup Œº‚Ä≤ loc‚Ä≤

-- Examples:
private
  Œº : Store
  Œº = ‚ü® 1 , l 2 , l 2 ‚ü© ‚Ü¶ ‚ü® `ùîπ , V-true ‚ü© ‚à∑
      ‚ü® 0 , l 0 , l 1 ‚ü© ‚Ü¶ ‚ü® `‚ä§ , V-tt ‚ü© ‚à∑
      ‚ü® 1 , l 2 , l 2 ‚ü© ‚Ü¶ ‚ü® `‚Ñí , V-label (l 0) ‚ü© ‚à∑ []

  _ : lookup Œº ‚ü® 0 , l 1 , l 1 ‚ü© ‚â° nothing
  _ = refl

  _ : lookup Œº ‚ü® 1 , l 2 , l 2 ‚ü© ‚â° just ‚ü® `ùîπ , V-true ‚ü©
  _ = refl
