module BigStep where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List hiding ([_])
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Maybe
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Utils
open import Heap
open import Types
open import TypeBasedCast
open import CC

infix 2 _‚à£_‚à£_‚ä¢_‚áì_‚à£_‚à£_

{- only consider evaluation to values -}
data _‚à£_‚à£_‚ä¢_‚áì_‚à£_‚à£_ : Heap ‚Üí HeapContext ‚Üí StaticLabel ‚Üí Term ‚Üí (V : Term) ‚Üí Value V ‚Üí Heap ‚Üí Set where

  ‚áì-val : ‚àÄ {Œº Œ£ pc V v}
      --------------------------- Value
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ V ‚áì V ‚à£ v ‚à£ Œº

  ‚áì-app : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œº‚ÇÉ Œ£ Œ£‚ÇÅ Œ£‚ÇÇ pc pc‚Ä≤ L M N V W v w A ‚Ñì}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ L       ‚áì ∆õ[ pc‚Ä≤ ] A Àô N of ‚Ñì ‚à£ V-∆õ ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc     ‚ä¢ M       ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ
    ‚Üí Œº‚ÇÇ ‚à£ Œ£‚ÇÇ ‚à£ pc ‚ãé ‚Ñì ‚ä¢ N [ V ] ‚áì W ‚à£ w ‚à£ Œº‚ÇÉ
      ---------------------------------------------------------------------- Application
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ¬∑ M ‚áì stamp-val W w ‚Ñì ‚à£ stamp-val-value w ‚à£ Œº‚ÇÉ

  ‚áì-if-true : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M N V v A ‚Ñì}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ L ‚áì $ true of ‚Ñì ‚à£ V-const ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ãé ‚Ñì ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ
      ---------------------------------------------------------------------- IfTrue
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ if L A M N ‚áì stamp-val V v ‚Ñì ‚à£ stamp-val-value v ‚à£ Œº‚ÇÇ

  ‚áì-if-false : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M N V v A ‚Ñì}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ L ‚áì $ false of ‚Ñì ‚à£ V-const ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ãé ‚Ñì ‚ä¢ N ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ
      ---------------------------------------------------------------------- IfFalse
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ if L A M N ‚áì stamp-val V v ‚Ñì ‚à£ stamp-val-value v ‚à£ Œº‚ÇÇ

  ‚áì-let : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc M N V W v w}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ M       ‚áì V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ N [ V ] ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
      ----------------------------------------- Let
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ `let M N ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ

  ‚áì-ref? : ‚àÄ {Œº Œº‚ÇÅ Œ£ pc M V v n ‚Ñì}
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí a[ ‚Ñì ] n FreshIn Œ£
    ‚Üí pc ‚âº ‚Ñì
      -------------------------------------------------------------------------------------- RefNSU
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ ref[ ‚Ñì ] M ‚áì addr (a[ ‚Ñì ] n) of low ‚à£ V-addr ‚à£ cons-Œº (a[ ‚Ñì ] n) V Œº‚ÇÅ

  ‚áì-ref : ‚àÄ {Œº Œº‚ÇÅ Œ£ pc M V v n ‚Ñì}
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí a[ ‚Ñì ] n FreshIn Œ£
      -------------------------------------------------------------------------------------- Ref
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ ref[ ‚Ñì ] M ‚áì addr (a[ ‚Ñì ] n) of low ‚à£ V-addr ‚à£ cons-Œº (a[ ‚Ñì ] n) V Œº‚ÇÅ

  ‚áì-deref : ‚àÄ {Œº Œº‚ÇÅ Œ£ pc M V n ‚Ñì ‚Ñì‚ÇÅ}
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì addr (a[ ‚Ñì‚ÇÅ ] n) of ‚Ñì ‚à£ V-addr ‚à£ Œº‚ÇÅ
    ‚Üí lookup-Œº Œº (a[ ‚Ñì‚ÇÅ ] n) ‚â° just V
      ---------------------------------------------------------------------------- Deref
    -- FIXME: our heap model probably need to store a proof of value
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ ! M ‚áì stamp-val V {!!} (‚Ñì‚ÇÅ ‚ãé ‚Ñì) ‚à£ stamp-val-value {!!} ‚à£ Œº‚ÇÅ

  ‚áì-assign? : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M V v n ‚Ñì ‚Ñì‚ÇÅ}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì addr (a[ ‚Ñì‚ÇÅ ] n) of ‚Ñì ‚à£ V-addr ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ
    ‚Üí pc ‚âº ‚Ñì‚ÇÅ
      -------------------------------------------------------------------------- AssignNSU
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ L := M ‚áì $ tt of low ‚à£ V-const ‚à£ cons-Œº (a[ ‚Ñì‚ÇÅ ] n) V Œº‚ÇÇ

  ‚áì-assign : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M V v n ‚Ñì ‚Ñì‚ÇÅ}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì addr (a[ ‚Ñì‚ÇÅ ] n) of ‚Ñì ‚à£ V-addr ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ
      -------------------------------------------------------------------------- Assign
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ L := M ‚áì $ tt of low ‚à£ V-const ‚à£ cons-Œº (a[ ‚Ñì‚ÇÅ ] n) V Œº‚ÇÇ

  ‚áì-cast : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc M V W v w A B} {c : Cast A ‚áí B}
    ‚Üí (a : Active c)
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí (‚ä¢V : [] Õæ Œ£ Õæ l low Õæ low ‚ä¢ V ‚¶Ç A)
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ apply-cast V ‚ä¢V v c a ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
      --------------------------------------------------------- Cast
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚ü® c ‚ü© ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ

  ‚áì-if-cast-true : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œº‚ÇÉ Œ£ Œ£‚ÇÅ Œ£‚ÇÇ pc L M N V W v w A g ‚Ñì}
                      {c : Cast (` Bool of g) ‚áí (` Bool of ‚ãÜ)}
    ‚Üí (i : Inert c)
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ L ‚áì $ true of ‚Ñì ‚ü® c ‚ü© ‚à£ V-cast V-const i ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ãé ‚Ñì ‚ä¢ M ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ    {- don't need casting PC to ‚ãÜ in big step -}
    ‚Üí Œº‚ÇÇ ‚à£ Œ£‚ÇÇ ‚à£ pc     ‚ä¢ V ‚ü® branch/c A ‚Ñì c ‚ü© ‚áì W ‚à£ w ‚à£ Œº‚ÇÉ
      --------------------------------------------------------- IfCastTrue
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ if L A M N ‚áì W ‚à£ w ‚à£ Œº‚ÇÉ

  ‚áì-if-cast-false : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œº‚ÇÉ Œ£ Œ£‚ÇÅ Œ£‚ÇÇ pc L M N V W v w A g ‚Ñì}
                       {c : Cast (` Bool of g) ‚áí (` Bool of ‚ãÜ)}
    ‚Üí (i : Inert c)
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ L ‚áì $ false of ‚Ñì ‚ü® c ‚ü© ‚à£ V-cast V-const i ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ãé ‚Ñì ‚ä¢ N ‚áì V ‚à£ v ‚à£ Œº‚ÇÇ
    ‚Üí Œº‚ÇÇ ‚à£ Œ£‚ÇÇ ‚à£ pc     ‚ä¢ V ‚ü® branch/c A ‚Ñì c ‚ü© ‚áì W ‚à£ w ‚à£ Œº‚ÇÉ
      --------------------------------------------------------- IfCastFalse
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc     ‚ä¢ if L A M N ‚áì W ‚à£ w ‚à£ Œº‚ÇÉ

  ‚áì-fun-cast : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œº‚ÇÉ Œ£ Œ£‚ÇÅ Œ£‚ÇÇ pc L M V V‚Ä≤ W v v‚Ä≤ w A B C D gc‚ÇÅ gc‚ÇÇ g‚ÇÅ g‚ÇÇ}
                  {c : Cast ([ gc‚ÇÅ ] A ‚áí B of g‚ÇÅ) ‚áí ([ gc‚ÇÇ ] C ‚áí D of g‚ÇÇ)}
    ‚Üí (i : Inert c)
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì V ‚ü® c ‚ü© ‚à£ V-cast v i ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
    ‚Üí Œº‚ÇÇ ‚à£ Œ£‚ÇÇ ‚à£ pc ‚ä¢ elim-fun-proxy V W i pc ‚áì V‚Ä≤ ‚à£ v‚Ä≤ ‚à£ Œº‚ÇÉ
      --------------------------------------------------------- FunCast
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ¬∑ M ‚áì V‚Ä≤ ‚à£ v‚Ä≤ ‚à£ Œº‚ÇÉ

  ‚áì-deref-cast : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc M V W v w A B g‚ÇÅ g‚ÇÇ}
                    {c : Cast (Ref A of g‚ÇÅ) ‚áí (Ref B of g‚ÇÇ)}
    ‚Üí (i : Inert c)
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ M ‚áì V ‚ü® c ‚ü© ‚à£ V-cast v i ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ ! V ‚ü® out/c c ‚ü© ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
      --------------------------------------------------------- DerefCast
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ ! M ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ

  ‚áì-assign?-cast : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M V W v w A B g‚ÇÅ g‚ÇÇ}
                      {c : Cast (Ref A of g‚ÇÅ) ‚áí (Ref B of g‚ÇÇ)}
    ‚Üí (i : Inert c)
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì V ‚ü® c ‚ü© ‚à£ V-cast v i ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ elim-ref-proxy V M i _:=?_ ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
      ----------------------------------------------------------- AssignNSUCast
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L :=? M ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ

  ‚áì-assign-cast : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M V W v w A B g‚ÇÅ g‚ÇÇ}
                     {c : Cast (Ref A of g‚ÇÅ) ‚áí (Ref B of g‚ÇÇ)}
    ‚Üí (i : Inert c)
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì V ‚ü® c ‚ü© ‚à£ V-cast v i ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ elim-ref-proxy V M i _:=_ ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
      ----------------------------------------------------------- AssignCast
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L := M ‚áì W ‚à£ w ‚à£ Œº‚ÇÇ
