open import Types

module CCSyntax (Cast_‚áí_ : Type ‚Üí Type ‚Üí Set) where

open import Data.List
open import Data.Bool renaming (Bool to ùîπ)

open import Syntax
open import BlameLabels
open import Addr


data Err : Set where
  blame   : BlameLabel ‚Üí Err
  nsu-err : Err

data Op : Set where
  op-addr   : (a : Addr) ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-lam    : (pc : StaticLabel) ‚Üí Type ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-app    : Op
  op-const  : ‚àÄ {Œπ} ‚Üí rep Œπ ‚Üí StaticLabel ‚Üí Op
  op-if     : Op
  op-let    : Op
  op-ref    : StaticLabel ‚Üí Op
  op-deref  : Op
  op-assign : Op
  op-cast   : ‚àÄ {A B} ‚Üí Cast A ‚áí B ‚Üí Op
  op-nsu-ref : StaticLabel ‚Üí Op
  op-nsu-assign : Op
  op-prot   : StaticLabel ‚Üí Op
  op-err    : Err ‚Üí Op

sig : Op ‚Üí List Sig
sig (op-addr a ‚Ñì)      = []
sig (op-lam pc A ‚Ñì)    = (ŒΩ ‚ñ†) ‚à∑ []
sig op-app             = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-const k ‚Ñì)     = []
sig op-if              = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig op-let             = ‚ñ† ‚à∑ (ŒΩ ‚ñ†) ‚à∑ []
sig (op-ref ‚Ñì)         = ‚ñ† ‚à∑ []
sig op-deref           = ‚ñ† ‚à∑ []
sig op-assign          = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-cast c)        = ‚ñ† ‚à∑ []
sig (op-nsu-ref ‚Ñì)     = ‚ñ† ‚à∑ []
sig op-nsu-assign      = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-prot ‚Ñì)        = ‚ñ† ‚à∑ []
sig (op-err e)         = []

open Syntax.OpSig Op sig renaming (ABT to Term) hiding (plug) public

infixl 7  _¬∑_
infix 8 _‚ü®_‚ü©

pattern addr_of_ a ‚Ñì             = (op-addr a ‚Ñì) ‚¶Ö nil ‚¶Ü
pattern ∆õ[_]_Àô_of_ pc A N ‚Ñì      = (op-lam pc A ‚Ñì) ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
pattern _¬∑_ L M                  = op-app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern $_of_ k ‚Ñì                = (op-const k ‚Ñì) ‚¶Ö nil ‚¶Ü
pattern if_then_else_endif L M N = op-if ‚¶Ö cons (ast L) (cons (ast M) (cons (ast N) nil)) ‚¶Ü
pattern `let M N                 = op-let ‚¶Ö cons (ast M) (cons (bind (ast N)) nil) ‚¶Ü
pattern ref[_]_ ‚Ñì M              = (op-ref ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern !_ M                     = op-deref ‚¶Ö cons (ast M) nil ‚¶Ü
pattern _:=_ L M                 = op-assign ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern _‚ü®_‚ü© M c                 = (op-cast c) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern nsu-ref ‚Ñì M              = (op-nsu-ref ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern nsu-assign L M           = op-nsu-assign ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern prot[_]_ ‚Ñì M             = (op-prot ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü {- protection term -}
pattern err e                    = (op-err e) ‚¶Ö nil ‚¶Ü               {- blame / nsu error -}
