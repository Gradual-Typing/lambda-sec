module BigStepErased where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List hiding ([_])
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Maybe
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Utils
open import Heap
open import Types
open import TypeBasedCast
open import CC

infix 2 _‚à£_‚à£_‚ä¢_‚áì‚Çë_‚à£_‚à£_

{- runs on erased terms -}
data _‚à£_‚à£_‚ä¢_‚áì‚Çë_‚à£_‚à£_ : HalfHeap ‚Üí HalfHeapContext ‚Üí StaticLabel ‚Üí Term ‚Üí (V : Term) ‚Üí Value V ‚Üí HalfHeap ‚Üí Set where

  ‚áì‚Çë-val : ‚àÄ {Œº Œ£ pc V v}
      --------------------------- Value
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ V ‚áì‚Çë V ‚à£ v ‚à£ Œº

  ‚áì‚Çë-app : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œº‚ÇÉ Œ£ Œ£‚ÇÅ Œ£‚ÇÇ pc pc‚Ä≤ L M N V W v w A}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L       ‚áì‚Çë ∆õ[ pc‚Ä≤ ] A Àô N of low ‚à£ V-∆õ ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M       ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ
    ‚Üí Œº‚ÇÇ ‚à£ Œ£‚ÇÇ ‚à£ pc ‚ä¢ N [ V ] ‚áì‚Çë W ‚à£ w ‚à£ Œº‚ÇÉ
      ---------------------------------------- Application
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ¬∑ M   ‚áì‚Çë W ‚à£ w ‚à£ Œº‚ÇÉ

  ‚áì‚Çë-if-true : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M N V v A}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì‚Çë $ true of low ‚à£ V-const ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ
      ------------------------------------------------ IfTrue
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ if L A M N ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ

  ‚áì‚Çë-if-false : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M N V v A}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì‚Çë $ false of low ‚à£ V-const ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ N ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ
      ------------------------------------------------ IfFalse
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ if L A M N ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ

  ‚áì‚Çë-let : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc M N V W v w}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ M        ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ N [ V ]  ‚áì‚Çë W ‚à£ w ‚à£ Œº‚ÇÇ
      ----------------------------------------- Let
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ `let M N ‚áì‚Çë W ‚à£ w ‚à£ Œº‚ÇÇ

  ‚áì‚Çë-ref? : ‚àÄ {Œº Œº‚ÇÅ Œ£ pc M V v n}
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí n ‚â° length Œ£
    ‚Üí pc ‚âº low
      -------------------------------------------------------------------------------------- RefNSU
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ ref?[ low ] M ‚áì‚Çë addr (a[ low ] n) of low ‚à£ V-addr ‚à£ ‚ü® n , V , v ‚ü© ‚à∑ Œº‚ÇÅ

  ‚áì‚Çë-ref : ‚àÄ {Œº Œº‚ÇÅ Œ£ pc M V v n}
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÅ
    ‚Üí n ‚â° length Œ£
      -------------------------------------------------------------------------------------- Ref
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ ref[ low ] M ‚áì‚Çë addr (a[ low ] n) of low ‚à£ V-addr ‚à£ ‚ü® n , V , v ‚ü© ‚à∑ Œº‚ÇÅ

  ‚áì‚Çë-deref : ‚àÄ {Œº Œº‚ÇÅ Œ£ pc M V v n}
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ M ‚áì‚Çë addr (a[ low ] n) of low ‚à£ V-addr ‚à£ Œº‚ÇÅ
    ‚Üí find _‚âü_ Œº n ‚â° just ‚ü® V , v ‚ü©
      ---------------------------------- Deref
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ ! M ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÅ

  ‚áì‚Çë-assign? : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M V v n}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì‚Çë addr (a[ low ] n) of low ‚à£ V-addr ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ
    ‚Üí pc ‚âº low
      -------------------------------------------------------------------------- AssignNSU
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ L :=? M ‚áì‚Çë $ tt of low ‚à£ V-const ‚à£ ‚ü® n , V , v ‚ü© ‚à∑ Œº‚ÇÇ

  ‚áì‚Çë-assign : ‚àÄ {Œº Œº‚ÇÅ Œº‚ÇÇ Œ£ Œ£‚ÇÅ pc L M V v n}
    ‚Üí Œº  ‚à£ Œ£  ‚à£ pc ‚ä¢ L ‚áì‚Çë addr (a[ low ] n) of low ‚à£ V-addr ‚à£ Œº‚ÇÅ
    ‚Üí Œº‚ÇÅ ‚à£ Œ£‚ÇÅ ‚à£ pc ‚ä¢ M ‚áì‚Çë V ‚à£ v ‚à£ Œº‚ÇÇ
      -------------------------------------------------------------------------- Assign
    ‚Üí Œº ‚à£ Œ£ ‚à£ pc ‚ä¢ L := M ‚áì‚Çë $ tt of low ‚à£ V-const ‚à£ ‚ü® n , V , v ‚ü© ‚à∑ Œº‚ÇÇ
